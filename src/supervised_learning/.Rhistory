2.26893e-06 / 0.00374536
7.90902e-06  / 0.00374536
0.0194107 / 0.00734072
0.0179243/ 0.00734072
3……7
3^7
3^7 % 133
3^7 %% 133
18 * 6
31*7
31*7 %% 108
217 %% 108
128^2 *2
(128^2 *2 ) %% 133
(50^2 *2 ) %% 133
5000 %% 133
3^7
1942 - 2*567
1942 - 3*567
567 - 2*241
76 - 5 * 45
6960 - 149
6960 - 4451
4451 - 2509
2509 - 1942
1942 - 3*567
567 - 2*241
241 - 2*85
85 - 71
5584 - 6104 * 2524
(5584 - 6104 * 3534) * 491
( (5584 - 6104 * 3534) * 491 ) %% 6960
5821*1181
5821*1181 %% 6961
(5821*1181) %% 6961
- 4/15 * (3/4 *log2(3/4) + 1/4 * log2(1/4)) - 8/15 * (log2(0.5))
(log2(0.5))
-6/15 - 9/15*(4/9 *log2(4/9) + 5/9 * log2(5/9))
-6/15 * (1/3 * log2(1/3) + 2/3 * log2(2/3)) - 5/15 * (2/5 * log2(2/5) + 3/5 * log2(3/5)) - 4/15
-9/15 * (1/3 * log2(1/3) + 2/3 * log2(2/3)) - 6/15 * (1/6 * log2(1/6) + 5/6 * log2(5/6))
(1/6 * log2(1/6) + 5/6 * log2(5/6)
(1/6 * log2(1/6) + 5/6 * log2(5/6))
3/4 *log2(3/4) + 1/4 * log2(1/4)
- 4/15 * (3/4 *log2(3/4) + 1/4 * log2(1/4)) - 8/15 * (log2(0.5))
-6/15(log2(0.5)) - 9/15*(4/9 *log2(4/9) + 5/9 * log2(5/9))
- 4/15 * (3/4 *log2(3/4) + 1/4 * log2(1/4)) - 8/15 * (log2(0.5))
-6/15 * log2(0.5) - 9/15*(4/9 *log2(4/9) + 5/9 * log2(5/9))
-6/15 * (1/3 * log2(1/3) + 2/3 * log2(2/3)) - 5/15 * (2/5 * log2(2/5) + 3/5 * log2(3/5)) - 4/15 * log2(0.5)
-9/15 * (1/3 * log2(1/3) + 2/3 * log2(2/3)) - 6/15 * (1/6 * log2(1/6) + 5/6 * log2(5/6))
-3/8 * (1/3 * log2(1/3) + 2/3 * log2(2/3)) - 5/8 * (2/5 * log2(2/5) + 3/5 * log2(3/5))
-1/2 * (log2(1/2)) - 3/8 * (1/3 * log2(1/3) + 2/3 * log2(2/3))
-6/8 * (1/3 * log2(1/3) + 2/3 * log2(2/3)) - 0
-1 * (1/3 * log2(1/3) + 2/3 * log2(2/3))
-1/2 * (1/3 * log2(1/3) + 2/3 * log2(2/3))
sqrt( (4-3.75)^2 + (9-5.375)^2)
sqrt( (1-3.75)^2 + (8-5.375)^2)
sqrt( (1-3.75)^2 + (5-5.375)^2)
sqrt( (6-3.75)^2 + (3-5.375)^2)
sqrt( (7-3.75)^2 + (5-5.375)^2 )
sqrt( (4-3.75)^2 + (5-5.375)^2 )
sqrt( (7-3.75)^2 + (8-5.375)^2 )
sqrt( (-3.75)^2 + (-5.375)^2 )
library(DAAG)
library(party)
library(rpart)
library(rpart.plot)
library(mlbench)
library(caret)
library(pROC)
library(tree)
setwd("C:\\work\\internship\\COMP4710-Group-11\\src\\supervised_learning")
us <- read.csv("../../US_Week49_COVID.csv")
dim(us)
us <- us[us$HAD.COVID==1,]
for(i in (2:15)){
#print(class(us[,i]))
print(names(us)[i])
print( table(us[,i]) )
}
## treat oral and treat mono has too many NAs; we do not use them for now
## current symptoms and impact are in the future, we can not predict on it
us <- us[,c(1,2,3,4,6,7,8,12, 14)]
for(i in (2:8)){
#print(class(us[,i]))
print(names(us)[i])
print( table(us[,i]) )
}
## check the number of positive cases and negative cases
table(us$LONG.COVID)
## delete all those data containing NA values
nas = union( which(us$SYMPTOM.SEVERITY == "N/A"), union( which(us$NUMBER.DOSES == "N/A"), which(us$BOOSTER == "N/A") ) )
#us_nas <- us[nas,]
us_pure <- us[-nas,]
## unbalanced data, we first choose 30% from the non-NA data as the test dataset
positive <- which(us_pure$LONG.COVID == 1)
negative <- which(us_pure$LONG.COVID == 0)
set.seed("2022120901")
test_pos_ind <- sample(positive, floor(length(positive) * 0.3) )
set.seed("2022120902")
test_neg_ind <- sample(negative, length(test_pos_ind))
test_ind <- union(test_pos_ind, test_neg_ind)
## get those training data:
train_pos_ind <- setdiff(positive, test_pos_ind)
train_neg_ind <- setdiff(negative, test_neg_ind)
set.seed("2022120902")
train_neg_ind <- sample(train_neg_ind, length(train_pos_ind))
train_ind <- union(train_pos_ind, train_neg_ind)
## all the other cases besides the training set
all_other_ind <- setdiff( c(1:nrow(us_pure)), train_ind )
## preprocess the us_pure data:
for(i in 3:ncol(us_pure)){
us_pure[,i] <- as.factor(us_pure[,i])
}
df <- us_pure[,-1]
for(i in 1:ncol(df)){
names(df)[i] <- sub("\\.", "_", names(df)[i])
}
train <- df[train_ind,]
test <- df[test_ind,]
intersect(train_ind, test_ind)
for(i in 2:7){
print(table(train[,c(i,8)]))
}
library("ggplot2")
rm_ind <- which(names(train) %in% c("VACCINATED", "NUMBER_DOSES"))
train <- train[, -rm_ind ] #remove
test <- test[, -rm_ind ] #remove
## build a decision tree on the training dataset
library("randomForest")
library("pROC")
tuneRF(train[,c(1:5)], train[,6], mtryStart = 2, ntreeTry = 1000, stepFactor = 1.5, improve = 0.01,
trace = TRUE, plot=TRUE, doBest = FALSE)
set.seed("2022120903")
model <- randomForest(LONG_COVID ~., data=train, ntree = 2000, mtry=2, importance=TRUE) #, proximity=TRUE)
pred <- predict(model, test, type = "prob")
model
roc_r <- roc(test$LONG_COVID, pred[,1])
roc_r$auc
model$importance
## using the decision tree:
library("rpart")
tree <- rpart(formula = LONG_COVID ~., data=train, parms=list(split=c("information", "gini")),
minsplit=2, minbucket=1, cp=0.001, xval=10, maxdepth=10 )
#plotcp(tree)
rpart.plot(tree)
p <- predict(tree, train, type = 'class')
confusionMatrix(p, train$LONG_COVID)
## auc
p1 <- predict(tree, test, type = 'prob')
confusionMatrix(p1)
confusionMatrix(p1, test$LONG_COVID)
p11 <- predict(tree, test, type='class')
confusionMatrix(p11, test$LONG_COVID)
others <- df[-train_ind,]
View(others)
View(others)
others <- df[-train_ind, -c(4,5)]
p1 <- predict(tree, others, type = 'prob')
p1 <- p1[,2]
r <- multiclass.roc(others$LONG_COVID, p1, percent = TRUE)
roc <- r[['rocs']]
r1 <- roc[[1]]
plot.roc(r1,
print.auc=TRUE,
auc.polygon=TRUE,
grid=c(0.1, 0.2),
grid.col=c("green", "red"),
max.auc.polygon=TRUE,
auc.polygon.col="lightblue",
print.thres=TRUE,
main= 'ROC Curve')
## plot the AUC
library(ROCR)
df_label <- as.character(others$LONG_COVID)
df_label[df_label=='1'] <- 1
df_label[df_label=='0'] <- 0
ppp <- prediction(p1, df_label)
perff <- ROCR::performance(ppp, measure = 'tpr', x.measure = 'fpr')
auc <- ROCR::performance(ppp, measure = "auc")
auc <- round(auc@y.values[[1]], 3)
#compute the 95% CI of AUC
q1 <- auc/(2-auc)
q2 <- 2*auc^2/(1+auc)
n1 <- length(df_label[df_label == 1])
n2 <- length(df_label[df_label == 0])
auc_se <- sqrt((auc*(1-auc) + (n1-1)*(q1-auc^2) + (n2-1)*(q2-auc^2))/(n1*n2))
CI_left <- round(auc - 1.96*auc_se, 3)
CI_right <- round(auc + 1.96*auc_se, 3)
roc.data <- data.frame(fpr=unlist(perff@x.values), tpr=unlist(perff@y.values) ) #,model="TREE")
auc_text <- paste("AUC = ",auc,"\n95%CI ",CI_left,"-",CI_right, "\nData Point\n",n1,"cases/",n2,"controls", sep="")
auc_label <- c(rep(NA, floor(0.74*nrow(roc.data))-1), auc_text, rep(NA, nrow(roc.data)-floor(0.74*nrow(roc.data))))
pic1 <-  ggplot(data=roc.data, aes(x=fpr, ymin=0, ymax=tpr))+
geom_ribbon(alpha=0.05) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve \n AUC=", auc)) +
theme(plot.title = element_text(hjust=0.5),
panel.background=element_rect(fill="white",color="black",linetype="dashed",size=1) )+
labs(x="False positive rate", y="True positive rate") +
geom_text(label=auc_label, y=0.35, hjust=0)
print(pic1)
p11 <- predict(tree, others, type='class')
confusionMatrix(p11, others$LONG_COVID)
others <- df[-train_ind,]
train <- df[train_ind,]
test <- df[test_ind,]
intersect(train_ind, test_ind)
others <- df[-train_ind,]
## descriptive analysis and feature selection using ??
edu=ggplot(data=train, aes(x=LONG_COVID, fill=RACE ))+geom_bar(position="fill",alpha=0.8,color="black")+scale_fill_manual(values=myfillcolors)+coord_flip()
## descriptive analysis and feature selection using ??
race <- ggplot(data=train, aes(x=LONG_COVID, fill=RACE ))+geom_bar(position="fill",alpha=0.8,color="black")
## descriptive analysis and feature selection using ??
race <- ggplot(data=train, aes(x=LONG_COVID, fill=RACE ))+geom_bar(position="fill",alpha=0.8,color="black")+
#+scale_fill_manual(values=myfillcolors)+
coord_flip()
race
age <- train%>%ggplot(aes(x=LONG_COVID,y=Age,fill=LONG_COVID))+geom_boxplot(alpha=0.8)+scale_fill_manual(values=myfillcolors)+coord_flip()
age <- ggplot(data=train, aes(x=LONG_COVID,y=Age,fill=LONG_COVID))+geom_boxplot(alpha=0.8)+scale_fill_manual(values=myfillcolors)+coord_flip()
age <- ggplot(data=train, aes(x=LONG_COVID,y=Age,fill=LONG_COVID))+geom_boxplot(alpha=0.8)+
#scale_fill_manual(values=myfillcolors)+
coord_flip()
age
age <- ggplot(data=train, aes(x=LONG_COVID,y=AGE,fill=LONG_COVID))+geom_boxplot(alpha=0.8)+
#scale_fill_manual(values=myfillcolors)+
coord_flip()
age
names(train)
## descriptive analysis and feature selection using ??
age <- ggplot(data=train, aes(x=LONG_COVID,y=AGE,fill=LONG_COVID))+geom_boxplot(alpha=0.8)+
#scale_fill_manual(values=myfillcolors)+
coord_flip()
race <- ggplot(data=train, aes(x=LONG_COVID, fill=RACE ))+geom_bar(position="fill",alpha=0.8,color="black")+
#+scale_fill_manual(values=myfillcolors)+
coord_flip()
gender <- ggplot(data=train, aes(x=LONG_COVID, fill=BIRTH_GENDER ))+geom_bar(position="fill",alpha=0.8,color="black")+
#+scale_fill_manual(values=myfillcolors)+
coord_flip()
vaccinated <- ggplot(data=train, aes(x=LONG_COVID, fill=VACCINATED ))+geom_bar(position="fill",alpha=0.8,color="black")+
#+scale_fill_manual(values=myfillcolors)+
coord_flip()
doses <- ggplot(data=train, aes(x=LONG_COVID, fill=NUMBER_DOSES ))+geom_bar(position="fill",alpha=0.8,color="black")+
#+scale_fill_manual(values=myfillcolors)+
coord_flip()
booster <- ggplot(data=train, aes(x=LONG_COVID, fill=BOOSTER ))+geom_bar(position="fill",alpha=0.8,color="black")+
#+scale_fill_manual(values=myfillcolors)+
coord_flip()
symp_severity <- ggplot(data=train, aes(x=LONG_COVID, fill=SYMPTOM_SEVERITY ))+geom_bar(position="fill",alpha=0.8,color="black")+
#+scale_fill_manual(values=myfillcolors)+
coord_flip()
grid.arrange(age, race, gender, vaccinated, doses, booster, syp_severity, ncol=2)
library(foreign)
library(tidyverse)
library(caret)
library(mlr)
library(gridExtra)
install.packages("gridExtra")
install.packages("mlr")
install.packages("rattle")
library(mlr)
library(gridExtra)
library(rattle)
## descriptive analysis and feature selection using ??
age <- ggplot(data=train, aes(x=LONG_COVID,y=AGE,fill=LONG_COVID))+geom_boxplot(alpha=0.8)+
#scale_fill_manual(values=myfillcolors)+
coord_flip()
race <- ggplot(data=train, aes(x=LONG_COVID, fill=RACE ))+geom_bar(position="fill",alpha=0.8,color="black")+
#+scale_fill_manual(values=myfillcolors)+
coord_flip()
gender <- ggplot(data=train, aes(x=LONG_COVID, fill=BIRTH_GENDER ))+geom_bar(position="fill",alpha=0.8,color="black")+
#+scale_fill_manual(values=myfillcolors)+
coord_flip()
vaccinated <- ggplot(data=train, aes(x=LONG_COVID, fill=VACCINATED ))+geom_bar(position="fill",alpha=0.8,color="black")+
#+scale_fill_manual(values=myfillcolors)+
coord_flip()
doses <- ggplot(data=train, aes(x=LONG_COVID, fill=NUMBER_DOSES ))+geom_bar(position="fill",alpha=0.8,color="black")+
#+scale_fill_manual(values=myfillcolors)+
coord_flip()
booster <- ggplot(data=train, aes(x=LONG_COVID, fill=BOOSTER ))+geom_bar(position="fill",alpha=0.8,color="black")+
#+scale_fill_manual(values=myfillcolors)+
coord_flip()
symp_severity <- ggplot(data=train, aes(x=LONG_COVID, fill=SYMPTOM_SEVERITY ))+geom_bar(position="fill",alpha=0.8,color="black")+
#+scale_fill_manual(values=myfillcolors)+
coord_flip()
grid.arrange(age, race, gender, vaccinated, doses, booster, syp_severity, ncol=2)
grid.arrange(age, race, gender, vaccinated, doses, booster, symp_severity, ncol=2)
ggsave("./descriptive_analysis.pdf",device="pdf", width = 5, height=5)
install.packages("tidyverse")
library(foreign)
library(tidyverse)
#some features are not useful obviously, so we apply
task=makeClassifTask(id="LONG_COVID",data=train, target="LONG_COVID",positive = "1")
learner = makeLearner("classif.rpart", predict.type = "prob")
myfillcolors=c("#ff0033","#330033", "#cc0033" , "#660033", "#990033","#630063")
ig=generateFilterValuesData(task,method="information.gain")%>%.$data%>%ggplot(aes(x=reorder(name,information.gain),y=information.gain,fill=reorder(name,information.gain)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="information gain")+scale_x_discrete("Features")+coord_flip()
install.packages("FSelector")
library("FSelector")
ig=generateFilterValuesData(task,method="information.gain")%>%.$data%>%ggplot(aes(x=reorder(name,information.gain),y=information.gain,fill=reorder(name,information.gain)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="information gain")+scale_x_discrete("Features")+coord_flip()
library("FSelector")
library(FSelector)
ig=generateFilterValuesData(task,method="information.gain")%>%.$data%>%ggplot(aes(x=reorder(name,information.gain),y=information.gain,fill=reorder(name,information.gain)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="information gain")+scale_x_discrete("Features")+coord_flip()
library(FSelector)
library(FSelector)
ig=generateFilterValuesData(task,method="information.gain")%>%.$data%>%ggplot(aes(x=reorder(name,information.gain),y=information.gain,fill=reorder(name,information.gain)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="information gain")+scale_x_discrete("Features")+coord_flip()
library(FSelector)
ig=generateFilterValuesData(task,method="information.gain")%>%.$data%>%ggplot(aes(x=reorder(name,information.gain),y=information.gain,fill=reorder(name,information.gain)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="information gain")+scale_x_discrete("Features")+coord_flip()
mr=generateFilterValuesData(task,method="mrmr")%>%.$data%>%ggplot(aes(x=reorder(name,mrmr),y=mrmr,fill=reorder(name,mrmr)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="mrmr")+scale_x_discrete("Features")+coord_flip()
pmi=generateFilterValuesData(task,method="permutation.importance",imp.learner=learner)%>%.$data%>%ggplot(aes(x=reorder(name,permutation.importance),y=permutation.importance,fill=reorder(name,permutation.importance)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="permut.Importance")+scale_x_discrete("Features")+coord_flip()
gt=generateFilterValuesData(task,method="gain.ratio")%>%.$data%>%ggplot(aes(x=reorder(name,gain.ratio),y=gain.ratio,fill=reorder(name,gain.ratio)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="Gain ratio")+scale_x_discrete("Features")+coord_flip()
library(FSelector)
install.packages("FSelector")
library(FSelector)
mr=generateFilterValuesData(task,method="mrmr")%>%.$data%>%ggplot(aes(x=reorder(name,mrmr),y=mrmr,fill=reorder(name,mrmr)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="mrmr")+scale_x_discrete("Features")+coord_flip()
install.packages("mRMRe")
library(mRMRe)
mr=generateFilterValuesData(task,method="mrmr")%>%.$data%>%ggplot(aes(x=reorder(name,mrmr),y=mrmr,fill=reorder(name,mrmr)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="mrmr")+scale_x_discrete("Features")+coord_flip()
library(mRMRe)
mr=generateFilterValuesData(task,method="mrmr")%>%.$data%>%ggplot(aes(x=reorder(name,mrmr),y=mrmr,fill=reorder(name,mrmr)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="mrmr")+scale_x_discrete("Features")+coord_flip()
gt=generateFilterValuesData(task,method="gain.ratio")%>%.$data%>%ggplot(aes(x=reorder(name,gain.ratio),y=gain.ratio,fill=reorder(name,gain.ratio)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="Gain ratio")+scale_x_discrete("Features")+coord_flip()
pmi=generateFilterValuesData(task,method="permutation.importance",imp.learner=learner)%>%.$data%>%ggplot(aes(x=reorder(name,permutation.importance),y=permutation.importance,fill=reorder(name,permutation.importance)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="permut.Importance")+scale_x_discrete("Features")+coord_flip()
mr=generateFilterValuesData(task,method="mrmr")%>%.$data%>%ggplot(aes(x=reorder(name,mrmr),y=mrmr,fill=reorder(name,mrmr)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="mrmr")+scale_x_discrete("Features")+coord_flip()
print(pmi)
print(pmi)
rlang::last_error()
pmi=generateFilterValuesData(task,method="permutation.importance",imp.learner=learner)%>%.$data%>%ggplot(aes(x=reorder(name,permutation.importance),y=permutation.importance,fill=reorder(name,permutation.importance)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="permut.Importance")+scale_x_discrete("Features")+coord_flip()
print(pmi)
generateFilterValuesData(task,method="permutation.importance",imp.learner=learner)%>%.$data%>%ggplot(aes(x=reorder(name,permutation.importance),y=permutation.importance,fill=reorder(name,permutation.importance)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="permut.Importance")+scale_x_discrete("Features")+coord_flip()
rlang::last_error()
myfillcolors=c("#ff0033","#330033", "#cc0033" , "#660033", "#990033","#630063", "#630093")
#library(FSelector)
library(mRMRe)
mr=generateFilterValuesData(task,method="mrmr")%>%.$data%>%ggplot(aes(x=reorder(name,mrmr),y=mrmr,fill=reorder(name,mrmr)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="mrmr")+scale_x_discrete("Features")+coord_flip()
generateFilterValuesData(task,method="permutation.importance",imp.learner=learner)%>%.$data%>%ggplot(aes(x=reorder(name,permutation.importance),y=permutation.importance,fill=reorder(name,permutation.importance)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="permut.Importance")+scale_x_discrete("Features")+coord_flip()
myfillcolors=c("#ff0033","#330033", "#cc0033" , "#660033", "#990033","#630063", "#630093")
table(train$VACCINATED)
#some features are not useful obviously, so we apply
train <- train[,-4]
test <- test[,-4]
task=makeClassifTask(id="LONG_COVID",data=train, target="LONG_COVID",positive = "1")
learner = makeLearner("classif.rpart", predict.type = "prob")
myfillcolors=c("#ff0033","#330033", "#cc0033" , "#660033", "#990033","#630063")
#library(FSelector)
library(mRMRe)
mr=generateFilterValuesData(task,method="mrmr")%>%.$data%>%ggplot(aes(x=reorder(name,mrmr),y=mrmr,fill=reorder(name,mrmr)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="mrmr")+scale_x_discrete("Features")+coord_flip()
generateFilterValuesData(task,method="permutation.importance",imp.learner=learner)%>%.$data%>%ggplot(aes(x=reorder(name,permutation.importance),y=permutation.importance,fill=reorder(name,permutation.importance)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="permut.Importance")+scale_x_discrete("Features")+coord_flip()
train$LONG_COVID <- as.character(train$LONG_COVID)
task=makeClassifTask(id="LONG_COVID",data=train, target="LONG_COVID",positive = "1")
learner = makeLearner("classif.rpart", predict.type = "prob")
myfillcolors=c("#ff0033","#330033", "#cc0033" , "#660033", "#990033","#630063")
#library(FSelector)
library(mRMRe)
generateFilterValuesData(task,method="permutation.importance",imp.learner=learner)%>%.$data%>%ggplot(aes(x=reorder(name,permutation.importance),y=permutation.importance,fill=reorder(name,permutation.importance)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="permut.Importance")+scale_x_discrete("Features")+coord_flip()
generateFilterValuesData(task,method="permutation.importance",imp.learner=learner)%>%.$data%>%ggplot(aes(x=reorder(name,permutation.importance),y=permutation.importance,fill=reorder(name,permutation.importance)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="permut.Importance")+scale_x_discrete("Features")+coord_flip()
rlang::last_error()
generateFilterValuesData(task,method="permutation.importance",imp.learner=learner)#%>%.$data%>%ggplot(aes(x=reorder(name,permutation.importance),y=permutation.importance,fill=reorder(name,permutation.importance)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="permut.Importance")+scale_x_discrete("Features")+coord_flip()
rrr <- generateFilterValuesData(task,method="permutation.importance",imp.learner=learner)#%>%.$data%>%ggplot(aes(x=reorder(name,permutation.importance),y=permutation.importance,fill=reorder(name,permutation.importance)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="permut.Importance")+scale_x_discrete("Features")+coord_flip()
rrr$task.desc
rrr$data
ig=generateFilterValuesData(task,method="information.gain") #%>%.$data%>%ggplot(aes(x=reorder(name,information.gain),y=information.gain,fill=reorder(name,information.gain)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="information gain")+scale_x_discrete("Features")+coord_flip()
pmi <- ggplot(data=rrr$data , aes(x=reorder(name,permutation.importance),y=permutation.importance,fill=reorder(name,permutation.importance)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="permut.Importance")+scale_x_discrete("Features")+coord_flip()
print(pmi)
pmi <- ggplot(data=rrr$data , aes(x=reorder(name,filter),y=filter,fill=reorder(name,filter)))+geom_bar(stat="identity",color="black",show.legend=F)+
scale_fill_manual(values=myfillcolors,name="filter")+scale_x_discrete("Features")+coord_flip()
print(pmi)
rrr$data
pmi <- ggplot(data=rrr$data , aes(x=reorder(name,value),y=value,fill=reorder(name,value)))+geom_bar(stat="identity",color="black",show.legend=F)+
scale_fill_manual(values=myfillcolors,name="value")+scale_x_discrete("Features")+coord_flip()
print(pmi)
mr=generateFilterValuesData(task,method="mrmr")%>%.$data%>%ggplot(aes(x=reorder(name,mrmr),y=mrmr,fill=reorder(name,mrmr)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="mrmr")+scale_x_discrete("Features")+coord_flip()
mr=generateFilterValuesData(task,method="mrmr")#%>%.$data%>%ggplot(aes(x=reorder(name,mrmr),y=mrmr,fill=reorder(name,mrmr)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="mrmr")+scale_x_discrete("Features")+coord_flip()
ig=generateFilterValuesData(task,method="information.gain") #%>%.$data%>%ggplot(aes(x=reorder(name,information.gain),y=information.gain,fill=reorder(name,information.gain)))+geom_bar(stat="identity",color="black",show.legend=F)+scale_fill_manual(values=myfillcolors,name="information gain")+scale_x_discrete("Features")+coord_flip()
library(FSelector)
install.packages("FSelector")
library(FSelector)
require(FSelector)
install.packages("FSelectorRcpp")
library(FSelector)
require(rJava)
